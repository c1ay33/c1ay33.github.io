<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pwn environment setup in Docker</title>
    <url>/2024/07/14/pwn-environment-setup-in-Docker/</url>
    <content><![CDATA[<p>Because when doing PWN problems, I encounter many different versions, and then it is troublesome to open many virtual machines, and WSL has many problems, so simply use docker to configure it.</p>
<p>I refer to the article on <a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/#docker-ctf-pwn">ctf_wiki</a>.<br>I write this article to record my <strong>Dockerfile</strong> .</p>
<h1 id="Install-docker"><a href="#Install-docker" class="headerlink" title="Install docker"></a>Install docker</h1><p>I use Ubuntu22.04 to install<br>See this doc <a href="https://docs.docker.com/engine/install/ubuntu/">Docker</a> to learn.</p>
<h1 id="Ubuntu22-04"><a href="#Ubuntu22-04" class="headerlink" title="Ubuntu22.04"></a>Ubuntu22.04</h1><p>Create a file <strong>Dockerfile</strong> in a blank folder and enter the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:22.04</span><br><span class="line"></span><br><span class="line">ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># pre-install softwares</span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="line">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="line">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="line">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><span class="line"></span><br><span class="line"># enable ssh login</span><br><span class="line">RUN rm -f /etc/service/sshd/down</span><br><span class="line">RUN sed -ri &#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="line">    sed -ri &#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/StrictModes yes/StrictModes no/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/UsePAM yes/UsePAM no/g&quot; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># enable login with password</span><br><span class="line">RUN echo &#x27;PasswordAuthentication yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># set username and password</span><br><span class="line">RUN groupadd arttnba3 &amp;&amp; \</span><br><span class="line">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="line">    echo &quot;arttnba3:123456&quot; | chpasswd &amp;&amp; \</span><br><span class="line">    echo &quot;root:123456&quot; | chpasswd</span><br><span class="line"></span><br><span class="line"># enable ssh key login</span><br><span class="line">#RUN mkdir /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="line">#    echo &quot;Your ssh key&quot; &gt; /home/arttnba3/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"># keep container running</span><br><span class="line">RUN echo &quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot; &gt; /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># enable sudo</span><br><span class="line">RUN apt-get install -y sudo &amp;&amp; \</span><br><span class="line">       usermod -aG sudo arttnba3</span><br><span class="line"></span><br><span class="line"># pwn-related tools</span><br><span class="line">RUN python3 -m pip config set global.index-url http://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="line">    python3 -m pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn &amp;&amp; \</span><br><span class="line">    python3 -m pip install -U pip &amp;&amp; \</span><br><span class="line">    python3 -m pip install --no-cache-dir \</span><br><span class="line">    pwntools \</span><br><span class="line">    ropgadget \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">    r2pipe \</span><br><span class="line">    LibcSearcher</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="line">    cd pwndbg &amp;&amp; chmod +x setup.sh &amp;&amp; ./setup.sh</span><br><span class="line"></span><br><span class="line">CMD [&quot;/root/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 22</span><br></pre></td></tr></table></figure>

<p>Then enter the following in the temenal to create images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu22 .</span><br></pre></td></tr></table></figure>
<p>Enter the fllowing to create container from images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -p 25001:22 \</span><br><span class="line">    --name=pwn22 \</span><br><span class="line">    -v ~/Desktop/CTF:/CTF \</span><br><span class="line">    pwnenv_ubuntu22</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -w /CTF -e TERM=xterm-256color -it pwn22 bash</span><br></pre></td></tr></table></figure>

<h1 id="Ubuntu23-04"><a href="#Ubuntu23-04" class="headerlink" title="Ubuntu23.04"></a>Ubuntu23.04</h1><p>I havenâ€™t looked at CTF for a long time, and many of the questions are 23.04</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:23.04</span><br><span class="line"></span><br><span class="line">ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># pre-install softwares</span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="line">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="line">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="line">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><span class="line"></span><br><span class="line"># enable ssh login</span><br><span class="line">RUN rm -f /etc/service/sshd/down</span><br><span class="line">RUN sed -ri &#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="line">    sed -ri &#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/StrictModes yes/StrictModes no/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/UsePAM yes/UsePAM no/g&quot; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># enable login with password</span><br><span class="line">RUN echo &#x27;PasswordAuthentication yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># set username and password</span><br><span class="line">RUN groupadd arttnba3 &amp;&amp; \</span><br><span class="line">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="line">    echo &quot;arttnba3:123456&quot; | chpasswd &amp;&amp; \</span><br><span class="line">    echo &quot;root:123456&quot; | chpasswd</span><br><span class="line"></span><br><span class="line"># enable ssh key login</span><br><span class="line">#RUN mkdir /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="line">#    echo &quot;Your ssh key&quot; &gt; /home/arttnba3/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"># keep container running</span><br><span class="line">RUN echo &quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot; &gt; /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># enable sudo</span><br><span class="line">RUN apt-get install -y sudo &amp;&amp; \</span><br><span class="line">       usermod -aG sudo arttnba3</span><br><span class="line"></span><br><span class="line"># pwn-related tools</span><br><span class="line">RUN python3 -m pip config set global.index-url http://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="line">    python3 -m pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn &amp;&amp; \</span><br><span class="line">    python3 -m pip install -U pip &amp;&amp; \</span><br><span class="line">    python3 -m pip install --no-cache-dir \</span><br><span class="line">    pwntools \</span><br><span class="line">    ropgadget \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">    r2pipe \</span><br><span class="line">    LibcSearcher</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="line">    cd pwndbg &amp;&amp; chmod +x setup.sh &amp;&amp; ./setup.sh</span><br><span class="line"></span><br><span class="line">CMD [&quot;/root/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 23</span><br></pre></td></tr></table></figure>

<p>Then enter the following in the temenal to create images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu23 .</span><br></pre></td></tr></table></figure>
<p>Enter the fllowing to create container from images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -p 25001:23 \</span><br><span class="line">    --name=pwn23 \</span><br><span class="line">    -v ~/Desktop/CTF:/CTF \</span><br><span class="line">    pwnenv_ubuntu23</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -w /CTF -e TERM=xterm-256color -it pwn23 bash</span><br></pre></td></tr></table></figure>


<h1 id="Ubuntu20-04"><a href="#Ubuntu20-04" class="headerlink" title="Ubuntu20.04"></a>Ubuntu20.04</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:20.04</span><br><span class="line"></span><br><span class="line">ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># pre-install softwares</span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="line">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="line">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="line">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><span class="line"></span><br><span class="line"># enable ssh login</span><br><span class="line">RUN rm -f /etc/service/sshd/down</span><br><span class="line">RUN sed -ri &#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="line">    sed -ri &#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/StrictModes yes/StrictModes no/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/UsePAM yes/UsePAM no/g&quot; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># enable login with password</span><br><span class="line">RUN echo &#x27;PasswordAuthentication yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># set username and password</span><br><span class="line">RUN groupadd arttnba3 &amp;&amp; \</span><br><span class="line">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="line">    echo &quot;arttnba3:123456&quot; | chpasswd &amp;&amp; \</span><br><span class="line">    echo &quot;root:123456&quot; | chpasswd</span><br><span class="line"></span><br><span class="line"># enable ssh key login</span><br><span class="line">#RUN mkdir /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="line">#    echo &quot;Your ssh key&quot; &gt; /home/arttnba3/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"># keep container running</span><br><span class="line">RUN echo &quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot; &gt; /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># enable sudo</span><br><span class="line">RUN apt-get install -y sudo &amp;&amp; \</span><br><span class="line">       usermod -aG sudo arttnba3</span><br><span class="line"></span><br><span class="line"># pwn-related tools</span><br><span class="line">RUN python3 -m pip config set global.index-url http://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="line">    python3 -m pip config set global.trusted-host pypi.tuna.tsinghua.edu.cn &amp;&amp; \</span><br><span class="line">    python3 -m pip install -U pip &amp;&amp; \</span><br><span class="line">    python3 -m pip install --no-cache-dir \</span><br><span class="line">    pwntools \</span><br><span class="line">    ropgadget \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">    r2pipe \</span><br><span class="line">    LibcSearcher</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="line">    cd pwndbg &amp;&amp; chmod +x setup.sh &amp;&amp; ./setup.sh</span><br><span class="line"></span><br><span class="line">CMD [&quot;/root/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 20</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu20 .</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -p &quot;25000:20&quot; \</span><br><span class="line">    --name=pwn20 \</span><br><span class="line">    -v ~/Desktop/CTF:/CTF \</span><br><span class="line">    -e XDG_RUNTIME_DIR=/tmp \</span><br><span class="line">    -e DISPLAY=$DISPLAY \</span><br><span class="line">    -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY \</span><br><span class="line">    -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY \</span><br><span class="line">    -e QT_QPA_PLATFORM=wayland \</span><br><span class="line">    pwnenv_ubuntu20</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -w /CTF -e TERM=xterm-256color -it pwn20 bash</span><br></pre></td></tr></table></figure>

<h1 id="Ubuntu19-04"><a href="#Ubuntu19-04" class="headerlink" title="Ubuntu19.04"></a>Ubuntu19.04</h1><p>i copy from <a href="https://lyyl.online/posts/2727069109.html">lyylâ€™blog</a>.Not quite the same as the normal version.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:19.04</span><br><span class="line"></span><br><span class="line">ENV TZ Asia/Shanghai</span><br><span class="line">ENV DEBIAN_FRONTEND noninteractive</span><br><span class="line"># ENV HTTP_PROXY &quot;socks5://192.168.0.6:10080&quot;</span><br><span class="line"># ENV HTTPS_PROXY &quot;socks5://192.168.0.6:10080&quot;</span><br><span class="line"></span><br><span class="line">RUN rm /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">COPY ubuntu_19_04_sources.list /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"># RUN sed -i &#x27;s/\(archive\|security\).ubuntu.com/mirrors.aliyun.com/&#x27; /etc/apt/sources.list</span><br><span class="line"># RUN cat /etc/apt/sources.list</span><br><span class="line"># RUN sed -i &#x27;s/archive.ubuntu.com/old-released.archive.ubuntu.com/&#x27; /etc/apt/sources.list</span><br><span class="line"># RUN sed -i &#x27;s/security.ubuntu.com/old-released.security.ubuntu.com/&#x27; /etc/apt/sources.list</span><br><span class="line"># RUN sed -i &#x27;s/# deb-src/deb-src/&#x27; /etc/apt/sources.list</span><br><span class="line"># RUN apt-get -y update &amp;&amp; apt-get install -y --no-install-recommends apt-utils</span><br><span class="line">RUN dpkg --add-architecture i386 &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get -y install software-properties-common &amp;&amp;\</span><br><span class="line">#    apt-add-repository universe &amp;&amp; \</span><br><span class="line">    apt-get install -y --no-install-recommends apt-utils &amp;&amp; \</span><br><span class="line">    apt install -y \</span><br><span class="line">    libc6:i386 \</span><br><span class="line">    libc6-dbg:i386 \</span><br><span class="line">    libc6-dbg \</span><br><span class="line">    lib32stdc++6 \</span><br><span class="line">    g++-multilib \</span><br><span class="line">    cmake \</span><br><span class="line">#    ipython3 \</span><br><span class="line">    vim \</span><br><span class="line">    net-tools \</span><br><span class="line">    iputils-ping \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    libssl-dev \</span><br><span class="line">    python3-dev \</span><br><span class="line">#     python3-pip \</span><br><span class="line">    build-essential \</span><br><span class="line">    ruby \</span><br><span class="line">    ruby-dev \</span><br><span class="line">    tmux \</span><br><span class="line">    strace \</span><br><span class="line">    ltrace \</span><br><span class="line">#     nasm \</span><br><span class="line">    wget \</span><br><span class="line">    gdb \</span><br><span class="line">#     gdb-multiarch \</span><br><span class="line">    netcat \</span><br><span class="line">    socat \</span><br><span class="line">    git \</span><br><span class="line">#    patchelf \</span><br><span class="line">    gawk \</span><br><span class="line">    file \</span><br><span class="line">#    python3-distutils \</span><br><span class="line">    tzdata \</span><br><span class="line">    bison</span><br><span class="line"></span><br><span class="line">COPY get-pip.py /</span><br><span class="line"></span><br><span class="line">RUN python3 get-pip.py</span><br><span class="line"></span><br><span class="line">RUN rm -rf /var/lib/apt/list/*</span><br><span class="line"></span><br><span class="line">RUN ln -fs /usr/share/zoneinfo/$TZ /etc/localtime &amp;&amp; \</span><br><span class="line">    dpkg-reconfigure -f noninteractive tzdata</span><br><span class="line">    </span><br><span class="line">RUN wget https://github.com/radareorg/radare2/releases/download/4.4.0/radare2_4.4.0_amd64.deb &amp;&amp; \</span><br><span class="line">    dpkg -i radare2_4.4.0_amd64.deb &amp;&amp; rm radare2_4.4.0_amd64.deb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN python3 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -U pip &amp;&amp; \</span><br><span class="line">    python3 -m pip config set global.index-url http://mirrors.aliyun.com/pypi/simple &amp;&amp; \</span><br><span class="line">    python3 -m pip config set install.trusted-host mirrors.aliyun.com &amp;&amp; \</span><br><span class="line">    python3 -m pip install setuptools --upgrade --no-cache-dir &amp;&amp;\</span><br><span class="line">    python3 -m pip install --no-cache-dir --use-feature=2020-resolver\</span><br><span class="line">    ropgadget \</span><br><span class="line">    pwntools \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">#    r2pipe \</span><br><span class="line">    filebytes \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    ropper</span><br><span class="line">#python3 -m pip install ropper --no-cache-dir</span><br><span class="line"></span><br><span class="line"># RUN gem install one_gadget seccomp-tools &amp;&amp; rm -rf /var/lib/gems/2.*/cache/*</span><br><span class="line">RUN gem install one_gadget &amp;&amp; rm -rf /var/lib/gems/2.*/cache/*</span><br><span class="line"></span><br><span class="line">RUN pip3 -V</span><br><span class="line"></span><br><span class="line">WORKDIR /root/</span><br><span class="line"></span><br><span class="line">COPY pwndbg /root/pwndbg</span><br><span class="line">COPY Pwngdb /root/Pwngdb</span><br><span class="line">RUN pwd</span><br><span class="line">RUN ls</span><br><span class="line"># RUN git clone --depth 1 https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="line">#    cd pwndbg &amp;&amp; chmod +x setup.sh &amp;&amp; ./setup.sh</span><br><span class="line">RUN cd /root/pwndbg &amp;&amp; chmod +x setup.sh &amp;&amp; ./setup.sh</span><br><span class="line"></span><br><span class="line">#RUN git clone --depth 1 https://github.com/scwuaptx/Pwngdb.git /root/Pwngdb &amp;&amp; \</span><br><span class="line">#    cd /root/Pwngdb &amp;&amp; cat /root/Pwngdb/.gdbinit  &gt;&gt; /root/.gdbinit</span><br><span class="line">RUN cd /root/Pwngdb &amp;&amp; cat /root/Pwngdb/.gdbinit  &gt;&gt; /root/.gdbinit</span><br><span class="line"># &amp;&amp; \</span><br><span class="line">#    sed -i &quot;s?source ~/peda/peda.py?# source ~/peda/peda.py?g&quot; /root/.gdbinit</span><br><span class="line"></span><br><span class="line">#RUN git clone --depth 1 https://github.com/niklasb/libc-database.git libc-database &amp;&amp; \</span><br><span class="line">#    cd libc-database &amp;&amp; ./get || echo &quot;/libc-database/&quot; &gt; ~/.libcdb_path</span><br><span class="line"></span><br><span class="line">ENV LANG C.UTF-8</span><br><span class="line"></span><br><span class="line">RUN touch /root/.tmux.conf &amp;&amp; \</span><br><span class="line">    echo &quot;set -g history-limit 5000&quot; &gt;&gt; /root/.tmux.conf &amp;&amp; \</span><br><span class="line">    echo &quot;set -g mouse on&quot; &gt;&gt; /root/.tmux.conf</span><br><span class="line"></span><br><span class="line">RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 100 --slave /usr/bin/pip pip /usr/bin/pip3 &amp;&amp;\</span><br><span class="line">    update-alternatives --install /usr/bin/python python /usr/bin/python2 90 --slave /usr/bin/pip pip /usr/bin/pip2</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s?source ~/peda/peda.py?# source ~/peda/peda.py?g&quot; /root/.gdbinit</span><br><span class="line"></span><br><span class="line">RUN mkdir ~/work</span><br><span class="line">WORKDIR /root/work</span><br><span class="line"></span><br><span class="line">EXPOSE 19</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;tmux&quot;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu19 .</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -p &quot;25000:19&quot; \</span><br><span class="line">    --name=pwn19 \</span><br><span class="line">    -v ~/Desktop/CTF:/CTF \</span><br><span class="line">    -e XDG_RUNTIME_DIR=/tmp \</span><br><span class="line">    -e DISPLAY=$DISPLAY \</span><br><span class="line">    -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY \</span><br><span class="line">    -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY \</span><br><span class="line">    -e QT_QPA_PLATFORM=wayland \</span><br><span class="line">    pwnenv_ubuntu19</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -w /CTF -e TERM=xterm-256color -it pwn18 bash</span><br></pre></td></tr></table></figure>


<h1 id="Ubuntu18-04"><a href="#Ubuntu18-04" class="headerlink" title="Ubuntu18.04"></a>Ubuntu18.04</h1><p>cause pwndbg has problems with versions below ubuntu20.04, I use pade instead.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line"></span><br><span class="line">ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># Pre-install software</span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="line">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="line">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="line">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><span class="line"></span><br><span class="line"># Enable SSH login</span><br><span class="line">RUN rm -f /etc/service/sshd/down</span><br><span class="line">RUN sed -ri &#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/StrictModes yes/StrictModes no/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/UsePAM yes/UsePAM no/g&quot; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># Enable login with password</span><br><span class="line">RUN echo &#x27;PasswordAuthentication yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># Set username and password</span><br><span class="line">RUN groupadd arttnba3 &amp;&amp; \</span><br><span class="line">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="line">    echo &quot;arttnba3:123456&quot; | chpasswd &amp;&amp; \</span><br><span class="line">    echo &quot;root:123456&quot; | chpasswd</span><br><span class="line"></span><br><span class="line"># Keep container running</span><br><span class="line">RUN echo &quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot; &gt; /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># Enable sudo</span><br><span class="line">RUN apt-get install -y sudo &amp;&amp; \</span><br><span class="line">    usermod -aG sudo arttnba3</span><br><span class="line"></span><br><span class="line"># Set pip environment variables</span><br><span class="line">ENV PIP_INDEX_URL=http://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">ENV PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn</span><br><span class="line"></span><br><span class="line"># Install pwn-related tools</span><br><span class="line">RUN python3 -m pip install -U pip &amp;&amp; \</span><br><span class="line">    python3 -m pip install --no-cache-dir \</span><br><span class="line">    pwntools \</span><br><span class="line">    ropgadget \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">    r2pipe \</span><br><span class="line">    LibcSearcher</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/hugsy/gef.git &amp;&amp; \</span><br><span class="line">    echo &quot;source /root/Env/gef/gef.py&quot; &gt; ~/.gdbinit</span><br><span class="line"></span><br><span class="line">CMD [&quot;/root/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 18</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu18 .</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -p &quot;25000:18&quot; \</span><br><span class="line">    --name=pwn18 \</span><br><span class="line">    -v ~/Desktop/CTF:/CTF \</span><br><span class="line">    -e XDG_RUNTIME_DIR=/tmp \</span><br><span class="line">    -e DISPLAY=$DISPLAY \</span><br><span class="line">    -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY \</span><br><span class="line">    -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY \</span><br><span class="line">    -e QT_QPA_PLATFORM=wayland \</span><br><span class="line">    pwnenv_ubuntu18 </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -w /CTF -e TERM=xterm-256color -it pwn18 bash</span><br></pre></td></tr></table></figure>

<h1 id="Ubuntu16-04"><a href="#Ubuntu16-04" class="headerlink" title="Ubuntu16.04"></a>Ubuntu16.04</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">ARG DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"># Pre-install software</span><br><span class="line">RUN sed -i &quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get -y update &amp;&amp; \</span><br><span class="line">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="line">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="line">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="line">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><span class="line"></span><br><span class="line"># Enable SSH login</span><br><span class="line">RUN rm -f /etc/service/sshd/down</span><br><span class="line">RUN sed -ri &#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/StrictModes yes/StrictModes no/g&quot; /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="line">    sed -ri &quot;s/UsePAM yes/UsePAM no/g&quot; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># Enable login with password</span><br><span class="line">RUN echo &#x27;PasswordAuthentication yes&#x27; &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"># Set username and password</span><br><span class="line">RUN groupadd arttnba3 &amp;&amp; \</span><br><span class="line">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="line">    echo &quot;arttnba3:123456&quot; | chpasswd &amp;&amp; \</span><br><span class="line">    echo &quot;root:123456&quot; | chpasswd</span><br><span class="line"></span><br><span class="line"># Keep container running</span><br><span class="line">RUN echo &quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot; &gt; /root/start.sh</span><br><span class="line">RUN chmod +x /root/start.sh</span><br><span class="line"></span><br><span class="line"># Enable sudo</span><br><span class="line">RUN apt-get install -y sudo &amp;&amp; \</span><br><span class="line">    usermod -aG sudo arttnba3</span><br><span class="line"></span><br><span class="line"># Set pip environment variables</span><br><span class="line">ENV PIP_INDEX_URL=http://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">ENV PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn</span><br><span class="line"></span><br><span class="line"># Install pwn-related tools</span><br><span class="line">RUN python3 -m pip install -U pip &amp;&amp; \</span><br><span class="line">    python3 -m pip install --no-cache-dir \</span><br><span class="line">    pwntools \</span><br><span class="line">    ropgadget \</span><br><span class="line">    z3-solver \</span><br><span class="line">    smmap2 \</span><br><span class="line">    apscheduler \</span><br><span class="line">    ropper \</span><br><span class="line">    unicorn \</span><br><span class="line">    keystone-engine \</span><br><span class="line">    capstone \</span><br><span class="line">    angr \</span><br><span class="line">    pebble \</span><br><span class="line">    r2pipe \</span><br><span class="line">    LibcSearcher</span><br><span class="line"></span><br><span class="line">RUN git clone https://github.com/hugsy/gef.git &amp;&amp; \</span><br><span class="line">    echo &quot;source /root/Env/gef/gef.py&quot; &gt; ~/.gdbinit</span><br><span class="line"></span><br><span class="line">CMD [&quot;/root/start.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 16</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t pwnenv_ubuntu16 .</span><br></pre></td></tr></table></figure>
<p>Enter the fllowing to create container from images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    -p 25001:16 \</span><br><span class="line">    --name=pwn16 \</span><br><span class="line">    -v ~/Desktop/CTF:/CTF \</span><br><span class="line">    pwnenv_ubuntu16</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -w /CTF -e TERM=xterm-256color -it pwn16 bash</span><br></pre></td></tr></table></figure>

<h1 id="using-gdb-attach"><a href="#using-gdb-attach" class="headerlink" title="using gdb.attach()"></a>using gdb.attach()</h1><p>when using <strong>gdb.attach()</strong> use the following in python file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
